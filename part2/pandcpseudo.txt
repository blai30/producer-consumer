mutex lock = 1;
semaphore full = 0;
semaphore empty = N;    // N is the number of buffers to maintain
int buffer[N];
int in_index;
int out_index;
int global_value = 1;

function producer() {
    int item;
    while (true) {
        item = global_value++;

        wait(empty);
        P(lock);

        enqueue(item);
        add item to producer array;

        V(lock);
        signal(full);
        sleep;
    }
    exit thread;
}

function consumer() {
    int item;
    while (true) {
        wait(full);
        P(lock);

        item = dequeue();
        add item to consumer array;

        V(lock);
        signal(empty);
        sleep;
    }
    exit thread;
}

function item enqueue(item) {
    buffer[in_index] = item;
    in_index = (in_index + 1) % N;
    return item;
}

function item dequeue() {
    item = buffer[out_index];
    delete item at buffer[out_index];
    out_index = (out_index + 1) % N;
    return item;
}

main {
    parse args;
    N = argv[1];      // number of buffers to maintain
    P = argv[2];      // number of producer threads
    C = argv[3];      // number of consumer threads
    X = argv[4];      // number of items each producer thread will produce
    Ptime = argv[5];  // how long each producer thread will sleep after producing an item in seconds
    Ctime = argv[6];  // how long each consumer thread will sleep after consuming an item in seconds

    items_consumed = P * X / C;
    over_consume_amount = (P * X) - (C * items_consumed);
    over_consume = (over_consume_amount > 0) ? 1 : 0;

    print all the info;

    for i < P {
        create producer thread;
    }
    for i < C {
        create consumer thread;
    }

    for i < P {
        join producer threads;
    }
    for i < C {
        join consumer threads;
    }

    flag match = true;
    for i < P * X {
        print producer_array[i] and consumer_array[i];
        if producer_array[i] != consumer_array[i] {
            match = false;
        }
    }
}
